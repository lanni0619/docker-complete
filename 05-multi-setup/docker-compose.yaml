services:
  mongodb:
    image: "mongo"
    volumes:
      - data:/data/db
    env_file:
      - ./env/mongo.env
    container_name: mongodb
  backend:
    build: ./backend
    ports:
      - "8080:8080"
    volumes:
      - logs:/app/logs
      - ./backend:/app
      - /app/node_modules
    env_file:
      - ./env/backend.env
    depends_on:
      - mongodb
  frontend:
    build: ./frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
    env_file:
      - ./env/frontend.env
    stdin_open: true
    tty: true
    depends_on:
      - backend
volumes:
  data:
  logs:
# ====================Notes====================

# Syntax
# image's value can be your own repo => C:/...
# Add dash for single value
# key-value pair don't need dash

# env/env_file
# environment:
#   MONGO_INITDB_ROOT_USERNAME=admin
#   MONGO_INITDB_ROOT_PASSWORD=1234

# network setting
# Compose will create a network automatically
# We also can specify a network as below
# networks:
#   - goal-net

# Volume Setting
# Named Volume must to specify both in service & volumes
# Bind mount can use relative path

# Run/Stop Compose
# docker-compose up -d
# docker-compose down => rm container automatically

# Build Image
# context property must be set to folder
# build:
#   context: ./backend
#   dockerfile: dockerfile
#   args:
#     some-arg:1

# depends_on
# Running after the dependency service


